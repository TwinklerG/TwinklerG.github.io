# 作业03——运算方法和运算部件

1. 无符号数采用逻辑移位，带符号整数采用算数移位(负数高位补1)

2. 移位运算替代乘2幂。

   <u>**注意**</u>：负数的移位有些特别(补码存储)

   `(a+3)>>2`等价于`a/4`

3. 串行进位和先行进位

   **串行进位**：行波进位加法器(Ripple Carry Adder)

   输入$X_i$ $Y_i$ 上一位的进位 $C_i$ 输出 $S_i$ 进位 $C_{i+1}$

   $S_i=X_i\oplus Y_i\oplus C_i$

   $C_{i+1}=X_iY_i+(X_i\oplus Y_i)C_i$

   **先行进位**：

   输入 $X_i$ $Y_i$ ，初始进位 $C_0$

   * 从传递链分析

     当前输入$X_i$ $Y_i$ 上一位进位 $C_i$

     $S_i=X_i\oplus Y_i\oplus C_i$

     $C_{i+1}=X_iY_i+(X_i\oplus Y_i)C_i$

     令$G_i = X_iY_i$

     $P_i=X_i\oplus Y_i$

     则 $C_{i+1}=G_i+P_iC_i$($C_i$ 是已知的，可写出递推)

   $C_n=G_{n-1}+P_{n-1}G_{n-2}+P_{n-1}P_{n-2}G_{n-3}+...+P_{n-1}P_{n-2}...P_1P_0C_0$

   $S_n=X_i\oplus Y_i\oplus C_n$

4. **补码的加减**运算：加法直接补码相加，减法将被减数取反得补码相加

   **原码一位乘法**：符号位异或，数值位乘法运算

   **补码一位布斯乘法**(符号位不单独处理)：

   已知$[x]_补$ $[y]_补$ 求 $[x\times y]_补$

   Y末尾加一位$y_{-1}$为0

   根据$y_i$ $y_{i-1}$的值

   * | $y_i$ | $y_{i-1}$ | 操作                  |
     |-------|-----------|---------------------|
     | 0     | 0         | 部分积加0，算术右移一位        |
     | 1     | 0         | 部分积加$[-x]_补$，算术右移一位 |
     | 0     | 1         | 部分积加$[x]_补$，算术右移一位  |
     | 1     | 1         | 部分积加0，算术右移一位        |

     操作次数由Y的位数决定

   最后得到2n位的部分积则为结果补码

# 作业04——指令集体系(基于RV32I)

1. 存储单元与数据

   * 地址值表示单元值

   * 大尾端高位优先，小尾端低位优先

   * 32位浮点数分成1位符号位，8位阶码编码，23位尾数编码
     $$
     N=(-1)^s\times 2^{e-127}\times 1.f
     $$
     1. 阶码全0，尾数不全0，该浮点数不是规格化浮点数，尾数实际为$0.f(次正规数)$
     
     2. 阶码全1，且尾数全为0，s为1表示负无穷大，s为0表示正无穷大
     
     3. 阶码全1，且尾数不全为0，则表示非数值数据(NaN)

2. RV32I指令(二进制)

   ![](./img/RV32I指令二进制.png)

   算术运算指令 

   ![](./img/算术运算指令.png)

   逻辑运算指令

   ![](./img/逻辑运算指令.png)

   数据存取指令

   ![](./img/数据存取指令.png)

   分支跳转指令

   ![](./img/分支跳转指令.png)

   指令格式：

   * 4种主要指令格式：R类型、I类型、S类型、U类型，均为32位长度

   * 2种处理立即数的指令类型：B类型、J类型

     ![](./img/RV32I各类型指令.png)

     * jal指令：操作码部分，两个寄存器部分和PC偏移部分(补码)

   掩码读取右两位：`ANDI rd, rs, imm 3`(AND immediate指令)

3. 将常数写入寄存器x5中(伪指令li的拓展)

   分两种情况讨论

   * 常数在0-4096($2^{-11}$-$2^{11}-1$)

     拓展成 $addi\space a_0,x_0,imme$

   * 常数更大

     拓展成

     1. $lui\space a_0, (immediately>>12)$
     2. $addi\space a_0,a_0,(immediately\space\&\space0xFFF)$

     (低12位为0，不需要第二条)

     * ==立即数为负数==的特殊情况

       * 第11位为0

         拓展如上

       * 第11位为1

         拓展成

         1. $lui\space a_0, (imediate>>12+1)$

         2. $addi\space a_0,a_0,((immediate\space\& \space0xFFF)-2^{12})$

            > 解释一下，这边需要手动给前20位加一，后面由于补码的原因，会自动减$2^{12}$

4. RV32I的JAL指令和条件分支指令（BEQ、BNE等），使用的立即数乘以2（或者左移一位）之后和当前的PC值相加，作为跳转的目标地址，这样符合我们的参考书和题目的设置；而JALR指令，是直接使用寄存器地址加上立即数，作为跳转的目标地址。所有的跳转地址计算都要比MIPS简单，请大家在做题时注意区分。
